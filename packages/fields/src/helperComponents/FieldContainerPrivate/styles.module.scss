@use '@snack-uikit/figma-tokens/build/scss/components/styles-tokens-fields';
@use '@snack-uikit/figma-tokens/build/scss/components/styles-tokens-element';

$sizes: 's', 'm', 'l';
$variants: 'single-line-container', 'single-line-container-button-before', 'single-line-container-button-after', 'multi-line-container';

@mixin validationState($state, $rainbowColor, $bgDefault) {
  &[data-validation='#{$state}'] {
    background-color: styles-tokens-fields.simple-var(styles-tokens-fields.$theme-variables, 'sys', $bgDefault, 'background1-level');
    border-color: styles-tokens-fields.simple-var(styles-tokens-fields.$theme-variables, 'sys', $bgDefault, 'decor-default');

    &:hover {
      background-color: styles-tokens-fields.$sys-neutral-background2-level;
      border-color: styles-tokens-fields.simple-var(styles-tokens-fields.$theme-variables, 'sys', $rainbowColor, 'decor-hovered');
    }

    &:not([data-readonly]):not([data-disable-focus]) {
      &:focus-within,
      &[data-focused] {
        &:not([data-disabled]) {
          @include styles-tokens-fields.outline-var(styles-tokens-element.$container-focused-m);

          background-color: styles-tokens-fields.simple-var(styles-tokens-fields.$sys-neutral-background2-level);
          border-color: styles-tokens-fields.simple-var(styles-tokens-fields.$theme-variables, 'sys', $rainbowColor, 'accent-default');
          outline-color: styles-tokens-fields.simple-var(styles-tokens-fields.$theme-variables, 'sys', $rainbowColor, 'decor-activated');
        }
      }
    }
  }
}

.container {
  @include validationState('default', 'primary', 'neutral');
  @include validationState('error', 'red', 'red');
  @include validationState('warning', 'yellow', 'yellow');
  @include validationState('success', 'green', 'green');

  position: relative;

  display: flex;
  align-items: center;
  justify-content: space-between;

  box-sizing: border-box;

  border-style: solid;

  @each $size in $sizes {
    &[data-size='#{$size}'] {
      @include styles-tokens-fields.composite-var(styles-tokens-fields.$fields, 'container', $size);

      &,
      input,
      select,
      textarea,
      span {
        @include styles-tokens-fields.composite-var(styles-tokens-fields.$theme-variables, 'sans', 'body', $size);
      }

      @each $variant in $variants {
        &[data-variant='#{$variant}'] {
          @include styles-tokens-fields.composite-var(styles-tokens-fields.$fields, $variant, $size);
        }
      }
    }
  }

  &[data-selectable] {
    &,
    input,
    select,
    textarea,
    span {
      cursor: pointer;
    }
  }

  &[data-readonly] {
    &,
    input,
    select,
    textarea,
    span {
      cursor: default;
    }

    &,
    &:hover {
      background-color: styles-tokens-fields.simple-var(styles-tokens-fields.$sys-neutral-decor-disabled);
      border-color: styles-tokens-fields.simple-var(styles-tokens-fields.$sys-neutral-decor-disabled);
    }

    &:not([data-disable-focus]) {
      &:focus-within,
      &[data-focused] {
        @include styles-tokens-fields.outline-var(styles-tokens-element.$container-focused-m);

        background-color: styles-tokens-fields.simple-var(styles-tokens-fields.$sys-neutral-decor-disabled);
        border-color: styles-tokens-fields.simple-var(styles-tokens-fields.$sys-neutral-decor-disabled);
        outline: none;
      }
    }
  }

  &[data-disabled] {
    &,
    input,
    select,
    textarea,
    span {
      cursor: not-allowed;
      background-color: styles-tokens-fields.simple-var(styles-tokens-fields.$sys-neutral-background);
    }

    &,
    &:focus-within,
    &[data-focused],
    &:hover {
      background-color: styles-tokens-fields.simple-var(styles-tokens-fields.$sys-neutral-background);
      border-color: styles-tokens-fields.simple-var(styles-tokens-fields.$sys-neutral-decor-disabled);
      outline: none;
    }
  }
}

.prefix {
  color: styles-tokens-fields.$sys-neutral-text-disabled;
}

@each $size in $sizes {
  [data-size='#{$size}'] {
     .prefix, .postfix {
      display: inline-flex;
      flex-shrink: 0;
      gap: styles-tokens-fields.simple-var(styles-tokens-fields.$fields, 'single-line-container', $size, 'gap');
      align-items: center;
    }
  }
}
