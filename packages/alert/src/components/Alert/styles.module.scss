@use '@snack-uikit/figma-tokens/build/scss/components/styles-tokens-alert';
@use '@snack-uikit/figma-tokens/build/scss/components/styles-tokens-element';

$colors: 'neutral', 'primary', 'red', 'yellow', 'green', 'blue';
$sizes: 's', 'm';
$icons: (
  's': 'xs',
  'm': 's',
);

.alert {
  display: flex;
  flex-direction: column;
  box-sizing: border-box;
  min-width: 256px;

  @each $color in $colors {
    &[data-color='#{$color}'] {
      background-color: styles-tokens-alert.simple-var(styles-tokens-alert.$theme-variables, 'sys', $color, 'background');
    }
  }

  @each $size in $sizes {
    &[data-size='#{$size}'] {
      @include styles-tokens-alert.composite-var(styles-tokens-alert.$alert, $size, 'container');
    }
  }
}

.alertOutline {
  outline-style: solid;
  outline-width: styles-tokens-alert.$border-width-accordion-collapse-block-primary;

  @each $color in $colors {
    &[data-color='#{$color}'] {
      outline-color: styles-tokens-alert.simple-var(styles-tokens-alert.$theme-variables, 'sys', $color, 'decor-default');

      &:focus-within,
      &:hover {
        outline-color: styles-tokens-alert.simple-var(styles-tokens-alert.$theme-variables, 'sys', $color, 'decor-default');
      }
    }
  }
}

.body {
  display: flex;
  box-sizing: border-box;
  width: 100%;

  @each $size in $sizes {
    &[data-size='#{$size}'] {
      @include styles-tokens-alert.composite-var(styles-tokens-alert.$alert, $size, 'body');
    }
  }
}

.icon {
  @each $color in $colors {
    &[data-color='#{$color}'] {
      color: styles-tokens-alert.simple-var(styles-tokens-alert.$theme-variables, 'sys', $color, 'accent-default');
    }
  }

  @each $name, $glyph in $icons {
    &[data-size='#{$name}'] {
      width: styles-tokens-alert.simple-var(styles-tokens-element.$icon, $glyph);
      height: styles-tokens-alert.simple-var(styles-tokens-element.$icon, $glyph);

      svg {
        max-width: styles-tokens-alert.simple-var(styles-tokens-element.$icon, $glyph);
        max-height: styles-tokens-alert.simple-var(styles-tokens-element.$icon, $glyph);
      }
    }
  }
}

.contentLayout {
  display: flex;
  flex: 1;
  flex-direction: column;
  min-width: 0;

  @each $size in $sizes {
    &[data-size='#{$size}'] {
      @include styles-tokens-alert.composite-var(styles-tokens-alert.$alert, $size, 'content-layout');
    }
  }
}

.title {
  color: styles-tokens-alert.$sys-neutral-text-main;

  &[data-size='s'] {
    @include styles-tokens-alert.composite-var(styles-tokens-alert.$sans-label-m);
  }

  &[data-size='m'] {
    @include styles-tokens-alert.composite-var(styles-tokens-alert.$sans-title-s);
  }
}

.description {
  color: styles-tokens-alert.$sys-neutral-text-support;
  word-wrap: break-word;

  @each $size in $sizes {
    &[data-size='#{$size}'] {
      @include styles-tokens-alert.composite-var(styles-tokens-alert.$theme-variables, 'sans', 'body', $size);
    }
  }
}

.footer {
  position: relative;

  display: flex;
  flex-direction: row-reverse;
  align-items: center;

  width: 100%;

  @each $size in $sizes {
    &[data-size='#{$size}'] {
      @include styles-tokens-alert.composite-var(styles-tokens-alert.$alert, $size, 'footer');
    }
  }
}
