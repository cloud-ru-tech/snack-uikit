@use '@snack-uikit/figma-tokens/build/scss/components/styles-tokens-link';
@use '@snack-uikit/figma-tokens/build/scss/components/styles-tokens-element';

$sizes: 's', 'm', 'l';
$text-modes: 'default', 'accent', 'on-accent';
$appearances: 'invert-neutral','neutral', 'primary', 'red', 'orange', 'blue', 'violet', 'pink', 'yellow', 'green';
$icon-sizes: (
  's': styles-tokens-element.$icon-xs,
  'm': styles-tokens-element.$icon-s,
  'l': styles-tokens-element.$icon-s,
);

.link {
  cursor: pointer;

  display: inline-flex;
  align-items: center;

  width: fit-content;
  max-width: 100%;

  text-decoration: none;
  text-decoration-skip-ink: none;

  &[data-inside-text] {
    display: inline;
  }

  @each $appearance in $appearances {
    &[data-appearance='#{$appearance}'] {
      &[data-text-mode='default'] {
        color: styles-tokens-link.simple-var(styles-tokens-link.$theme-variables, 'sys', $appearance, 'text-support');

        &:hover {
          color: styles-tokens-link.simple-var(styles-tokens-link.$theme-variables, 'sys', $appearance, 'text-main');
        }

        &:focus-visible {
          @include styles-tokens-link.outline-var(styles-tokens-element.$container-focused-s);

          color: styles-tokens-link.simple-var(styles-tokens-link.$theme-variables, 'sys', $appearance, 'text-main');
          outline-color: styles-tokens-link.$sys-available-complementary;
        }
      }

      &[data-text-mode='accent'] {
        color: styles-tokens-link.simple-var(styles-tokens-link.$theme-variables, 'sys', $appearance, 'accent-default');

        &:hover {
          color: styles-tokens-link.simple-var(styles-tokens-link.$theme-variables, 'sys', $appearance, 'text-main');
        }

        &:focus-visible {
          @include styles-tokens-link.outline-var(styles-tokens-element.$container-focused-s);

          color: styles-tokens-link.simple-var(styles-tokens-link.$theme-variables, 'sys', $appearance, 'text-main');

          @if $appearance == 'invert-neutral' {
            outline-color: styles-tokens-link.$sys-available-on-complementary;
          }

 @else {
            outline-color: styles-tokens-link.$sys-available-complementary;
          }
        }
      }

      &[data-text-mode='on-accent'] {
        color: styles-tokens-link.simple-var(styles-tokens-link.$theme-variables, 'sys', $appearance, 'on-accent');

        &:hover {
          color: styles-tokens-link.simple-var(styles-tokens-link.$theme-variables, 'sys', $appearance, 'on-accent');
          opacity: styles-tokens-link.$opacity-a080;
        }

        &:focus-visible {
          @include styles-tokens-link.outline-var(styles-tokens-element.$container-focused-s);

          color: styles-tokens-link.simple-var(styles-tokens-link.$theme-variables, 'sys', $appearance, 'on-accent');
          opacity: styles-tokens-link.$opacity-a080;
          outline-color: styles-tokens-link.$sys-available-on-complementary;
        }
      }
    }
  }

  @each $size in $sizes {
    &[data-size='#{$size}'] {
      @each $text-mode in $text-modes {
        &[data-text-mode='#{$text-mode}'] {
          @if $text-mode == 'default' {
            @include styles-tokens-link.composite-var(styles-tokens-link.$theme-variables, 'sans', 'body', $size);
          }

 @else {
            @include styles-tokens-link.composite-var(styles-tokens-link.$theme-variables, 'link', 'body', $size);
          }
        }
      }

      @include styles-tokens-link.composite-var(styles-tokens-link.$link, 'container', $size);

      svg {
        width: styles-tokens-link.simple-var($icon-sizes, $size) !important; /* stylelint-disable-line declaration-no-important */
        height: styles-tokens-link.simple-var($icon-sizes, $size) !important; /* stylelint-disable-line declaration-no-important */
      }
    }
  }
}

.icon {
  flex-shrink: 0;
}