@import 'figma-tokens/build/components/styles-tokens-button-buttonFilled';

$types: primary, neutral, critical;
$sizes: size-s, size-m, size-l;
$variants: label-only, icon-only, label-icon;

@function get-label-state($variant, $state) {
  @if $variant == 'label-only' {
    @if $state == 'load' {
      @return 'load-label-only';
    }
  }
  @return $state;
}

@mixin button-size-styles {
  @each $size in $sizes {
    &[data-size='#{$size}'] {
      @each $variant in $variants {
        &[data-variant='#{$variant}'] {
          @include theme-map($button-filled, $size, 'container', $variant);

          .buttonLabel {
            @include theme-map($button-filled, $size, 'text', 'label');
          }
        }
      }
    }
  }
}

@mixin type-styles($type, $state, $variant: "") {
  @include theme-map($button-filled, $type, "container", $state);

  .buttonLabel {
    @include theme-map($button-filled, $type, "label", get-label-state($variant, $state));
  }

  .buttonIcon {
    @include theme-map($button-filled, $type, 'icon', $state);
  }
}

@mixin button-type-styles {
  @each $type in $types {
    &[data-type='#{$type}'] {
      @include type-styles($type, "enabled");

      &:hover {
        @include type-styles($type, "hovered");
      }

      &:focus {
        @include type-styles($type, "focused");
      }

      &:active {
        @include type-styles($type, "pressed");
      }

      &:disabled,
      &[data-disabled] {
        @include type-styles($type, "disabled");
      }

      @each $variant in $variants {
        &[data-variant='#{$variant}'][data-loading] {
          @if $variant == 'label-only' {
            .buttonIcon {
              position: absolute;
              top: 50%;
              left: 50%;
              transform: translate(-50%, -50%);
            }
          }

          @include type-styles($type, "load", $variant);
        }
      }
    }
  }
}

.button {
  box-sizing: border-box;
  border: 0 solid transparent;
  background-color: transparent;
  margin: 0;
  padding: 0;
  outline: 0;
  cursor: pointer;
  text-transform: none;
  text-decoration: none;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  width: max-content;
  min-width: max-content;
  position: relative;

  @include button-size-styles;
  @include button-type-styles;
}

.loadingWheel {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}